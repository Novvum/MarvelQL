# import * from "./generated/prisma.graphql"

type Query {
	"""
	Fetches a list of characters.
	"""
	characters(
		where: CharacterWhereInput
		"""
		Skips the specified number of resources in the result set.
		"""
		offset: Int
		"""
		Limit the result set to the specified number of resources.
		"""
		limit: Int
		orderBy: CharacterOrderBy
	): [Character!]
	"""
	Fetches a single character by id.
	"""
	getCharacter(where: CharacterWhereInput): Character
	"""
	Fetches a list of comics.
	"""
	comics(
		where: ComicWhereInput
		orderBy: ComicOrderBy
		"""
		Skips the specified number of resources in the result set.
		"""
		offset: Int
		"""
		Limit the result set to the specified number of resources.
		"""
		limit: Int
	): [Comic!]
	"""
	Fetches a single comic by id.
	"""
	getComic(where: ComicWhereInput): Comic
	"""
	Fetches a list of creators.
	"""
	creators(
		where: CreatorWhereInput
		orderBy: CreatorOrderBy
		"""
		Skips the specified number of resources in the result set.
		"""
		offset: Int
		"""
		Limit the result set to the specified number of resources.
		"""
		limit: Int
	): [Creator!]
	"""
	Fetches a single creator by id.
	"""
	getCreator(where: CreatorWhereInput): Creator
	"""
	Fetches a list of events.
	"""
	events(
		where: EventsWhereInput
		orderBy: EventsOrderBy
		"""
		Skips the specified number of resources in the result set.
		"""
		offset: Int
		"""
		Limit the result set to the specified number of resources.
		"""
		limit: Int
	): [Event!]
	"""
	Fetches a single event by id.
	"""
	getEvent(where: EventsWhereInput): Event
	"""
	Fetches a list of series.
	"""
	series(
		where: SeriesWhereInput
		orderBy: SeriesOrderBy
		"""
		Skips the specified number of resources in the result set.
		"""
		offset: Int
		"""
		Limit the result set to the specified number of resources.
		"""
		limit: Int
	): [Series!]
	"""
	Fetches a single series by id.
	"""
	getSeries(where: SeriesWhereInput): Series
	"""
	Fetches a list of stories.
	"""
	stories(
		where: StoriesWhereInput
		orderBy: StoriesOrderBy
		"""
		Skips the specified number of resources in the result set.
		"""
		offset: Int
		"""
		Limit the result set to the specified number of resources.
		"""
		limit: Int
	): [Story!]
	"""
	Fetches a single story by id.
	"""
	getStory(where: StoriesWhereInput): Story
}

input CharacterWhereInput {
	"""
	Returns only characters matching the specified id
	"""
	id: Int
	"""
	Returns only characters matching the specified full character name (e.g. Spider-Man).
	"""
	name: String
	"""
	Returns characters with names that begin with the specified string (e.g. Sp).
	"""
	nameStartsWith: String
	"""
	Returns only characters which have been modified since the specified date.
	"""
	modifiedSince: String
	"""
	Returns only characters which appear in the specified comics (accepts a comma-separated list of ids).
	"""
	comics: [ID!]
	"""
	Returns only characters which appear the specified series (accepts a comma-separated list of ids).
	"""
	series: [ID!]
	"""
	Returns only characters which appear in the specified events (accepts a comma-separated list of ids).
	"""
	events: [ID!]
	"""
	Returns only characters which appear the specified stories (accepts a comma-separated list of ids).
	"""
	stories: [ID!]
}
"""
Orders the result set by a field or fields. Multiple values are given priority in the order in which they are passed.
"""
enum CharacterOrderBy {
	"""
	Returns character in A-Z order (i.e 3-D Man, A-Bomb (HAS), A.I.M, etc...)
	"""
	name_asc
	"""
	Returns character in Z-A order (i.e , etc...)
	"""
	name_desc
	"""
	Returns character's modification date in ascending order
	"""
	modified_asc
	"""
	Returns character's modification date in descending order
	"""
	modified_desc
}

enum SeriesType {
	collection
	one_shot
	limited
	ongoing
}

enum ComicFormat {
	magazine
	trade_paperback
	hardcover
	digest
	graphic_novel
	comic
	digital_comic
	infinite_comic
}

enum ComicFormatType {
	comic
	collection
}

enum DateDescriptor {
	lastWeek
	thisWeek
	nextWeek
	thisMonth
}

input ComicWhereInput {
	format: ComicFormat
	formatType: ComicFormatType
	noVariants: Boolean
	dateDescriptor: DateDescriptor
	dateRange: Int
	diamondCode: String
	digitalId: Int
	upc: String
	isbn: String
	ean: String
	issn: String
	hasDigitalIssue: Boolean
	modifiedSince: DateTime
	creators: [ID!]
	characters: [ID!]
	series: [ID!]
	stories: [ID!]
	sharedAppearances: [ID!]
	collaborators: [ID!]
}

enum ComicOrderBy {
	focDate_asc
	onSaleDate_asc
	title_asc
	issueNumber_asc
	modified_asc
	focDate_desc
	onSaleDate_desc
	title_desc
	issueNumber_desc
	modified_desc
}

input CreatorWhereInput {
	firstName: String
	middleName: String
	lastName: String
	suffix: String
	nameStartsWith: String
	firstNameStartsWith: String
	middleNameStartsWith: String
	lastNameStartsWith: String
	modifiedSince: DateTime
	comics: [ID!]
	series: [ID!]
	events: [ID!]
	stories: [ID!]
}

enum CreatorOrderBy {
	lastName_asc
	firstName_asc
	middleName_asc
	suffix_asc
	modified_asc
	lastName_desc
	firstName_desc
	middleName_desc
	suffix_desc
	modified_desc
}

input EventsWhereInput {
	name: String
	nameStartsWith: String
	modifiedSince: DateTime
	creators: [ID!]
	characters: [ID!]
	series: [ID!]
	comics: [ID!]
}

enum EventsOrderBy {
	name_asc
	startDate_asc
	modified_asc
	name_desc
	startDate_desc
	modified_desc
}

input SeriesWhereInput {
	title: String
	titleStartsWith: String
	startYear: Int
	modifiedSince: DateTime
	contains: ComicFormat
	seriesType: SeriesType
	comics: [ID!]
	stories: [ID!]
	events: [ID!]
	creators: [ID!]
	characters: [ID!]
}

enum SeriesOrderBy {
	title_asc
	modified_asc
	startYear_asc
	title_desc
	modified_desc
	startYear_desc
}

input StoriesWhereInput {
	modifiedSince: DateTime
	comics: [ID!]
	series: [ID!]
	events: [ID!]
	creators: [ID!]
	characters: [ID!]
}

enum StoriesOrderBy {
	id_asc
	id_desc
	modified_asc
	modified_desc
}

interface MarvelNode {
	"""
	A unique ID to a particular marvel resource.
	"""
	id: ID
	"""
	The canonical URL identifier for a resource.
	"""
	resourceURI: String
	"""
	The url path for a canonical photo to the resource
	"""
	thumbnail: String
	"""
	A date for which the resource has been modified
	"""
	modified: String
}

type Summary {
	"""
	The canonical URL identifier for this summary resource.
	"""
	resourceURI: String
	name: String
	role: String
	type: String
}

type Character implements MarvelNode {
	"""
	The unique ID of the character resource.
	"""
	id: ID
	"""
	The name of the character.
	"""
	name: String
	"""
	The url path of to the image related to the character.
	"""
	thumbnail: String
	"""
	A short bio or description of the character.
	"""
	description: String
	"""
	The date the resource was most recently modified.
	"""
	modified: String
	"""
	The canonical URL identifier for this resource.
	"""
	resourceURI: String
	"""
	A set of public web site URLs for the resource.
	"""
	urls: [MarvelUrl!]
	"""
	Lists of comics filtered by a character id.
	"""
	comics: [Summary!]
	"""
	Lists of series filtered by a character id.
	"""
	series: [Summary!]
	"""
	Lists of events filtered by a character id.
	"""
	events: [Summary!]
	"""
	Lists of stories filtered by a character id.
	"""
	stories: [Summary!]
}
type Comic implements MarvelNode {
	"""
	The unique ID of the comic resource.
	"""
	id: ID
	"""
	The ID of the digital comic representation of this comic. Will be 0 if the comic is not available digitally.
	"""
	digitalId: Int
	"""
	The canonical title of the comic.
	"""
	title: String
	"""
	The number of the issue in the series (will generally be 0 for collection formats).
	"""
	issueNumber: Int
	"""
	If the issue is a variant (e.g. an alternate cover, second printing, or directorâ€™s cut), a text description of the variant.
	"""
	variantDescription: String
	"""
	The preferred description of the comic.
	"""
	description: String
	"""
	The date the resource was most recently modified.
	"""
	modified: String
	"""
	The ISBN for the comic (generally only populated for collection formats).
	"""
	isbn: String
	"""
	The UPC barcode number for the comic (generally only populated for periodical formats)
	"""
	upc: String
	"""
	The Diamond code for the comic.
	"""
	diamondCode: String
	"""
	The EAN barcode for the comic.
	"""
	ean: String
	"""
	The ISSN barcode for the comic.
	"""
	issn: String
	"""
	The publication format of the comic e.g. comic, hardcover, trade paperback.
	"""
	format: String
	"""
	A set of descriptive text blurbs for the comic.
	"""
	textObjects: [TextObject!]
	"""
	The canonical URL identifier for this resource.
	"""
	resourceURI: String
	"""
	A set of public web site URLs for the resource.
	"""
	urls: [MarvelUrl!]
	"""
	A list of series (Summary Types) to this comic
	"""
	series: Summary
	"""
	A list of variant issues for this comic (includes the "original" issue if the current issue is a variant)
	"""
	variants: [Summary!]
	"""
	A list of collections which include this comic (will generally be empty if the comic's format is a collection).
	"""
	collections: [Summary!]
	"""
	A list of issues collected in this comic (will generally be empty for periodical formats such as "comic" or magazine").
	"""
	collectedIssues: [Summary!]
	"""
	A list of key dates for this comic.
	"""
	dates: [ComicDate!]
	"""
	A list of prices for this comic.
	"""
	prices: [ComicPrice!]
	"""
	The url path of to the image related to the comic.
	"""
	thumbnail: String
	"""
	A list of promotional images associated with this comic.
	"""
	images: [ComicImage!]
	"""
	A list of characters (Summary Types) to this comic
	"""
	characters: [Summary!]
	"""
	A list of events (Summary Types) related to this comic
	"""
	events: [Summary!]
	"""
	A list of stories (Summary Types) related to this comic
	"""
	stories: [Summary!]
	"""
	A list of creators (Summary Types) related to this comic
	"""
	creators: [Summary!]
}

type Creator implements MarvelNode {
	"""
	The unique ID of the creator resource.
	"""
	id: ID
	"""
	The first name of the creator
	"""
	firstName: String
	"""
	The middle name of the creator
	"""
	middleName: String
	"""
	The last name of the creator
	"""
	lastName: String
	"""
	The suffix of the creator
	"""
	suffix: String
	"""
	The full name of the creator
	"""
	fullName: String
	"""
	The date for which the creator resource was last modified
	"""
	modified: String
	"""
	The canonical URL identifier for this resource.
	"""
	resourceURI: String
	"""
	A set of public web site URLs for the resource.
	"""
	urls: [MarvelUrl!]
	"""
	The url path of to the image related to the creator.
	"""
	thumbnail: String
	"""
	A list of series (Summary Types) related to this creator
	"""
	series: [Summary!]
	"""
	A list of stories (Summary Types) related to this creator
	"""
	stories: [Summary!]
	"""
	A list of comics (Summary Types) related to this creator
	"""
	comics: [Summary!]
	"""
	A list of events (Summary Types) related to this creator
	"""
	events: [Summary!]
}

type Event implements MarvelNode {
	"""
	The unique ID of the event resource.
	"""
	id: ID
	"""
	The title of the event.
	"""
	title: String
	"""
	A description of the event.
	"""
	description: String
	"""
	The canonical URL identifier for this resource.
	"""
	resourceURI: String
	"""
	A set of public web site URLs for the resource.
	"""
	urls: [MarvelUrl!]
	"""
	The date the resource was most recently modified.
	"""
	modified: String
	"""
	The date of publication of the first issue in this event.
	"""
	start: String
	"""
	The date of publication of the last issue in this event.
	"""
	end: String
	"""
	The url path of to the image related to the comic.
	"""
	thumbnail: String
	"""
	A list of series (Summary Types) related to this event
	"""
	series: [Summary!]
	"""
	A list of stories (Summary Types) related to this event
	"""
	stories: [Summary!]
	"""
	A list of comics (Summary Types) related to this event
	"""
	comics: [Summary!]
	"""
	A list of characters (Summary Types) related to this event
	"""
	characters: [Summary!]
	"""
	A list of creators (Summary Types) related to this event
	"""
	creators: [Summary!]
	"""
	The next event (Summary Type) following this event
	"""
	next: Summary
	"""
	The previous event (Summary Type) leading up to this event
	"""
	previous: Summary
}

type Series implements MarvelNode {
	"""
	The unique ID of the series resource.
	"""
	id: ID

	title: String
	description: String
	"""
	The canonical URL identifier for this resource.
	"""
	resourceURI: String
	"""
	A set of public web site URLs for the resource.
	"""
	urls: [MarvelUrl!]
	startYear: Int
	endYear: Int
	rating: String
	modified: String
	"""
	The url path of to the image related to the comic.
	"""
	thumbnail: String
	comics: [Summary!]
	stories: [Summary!]
	events: [Summary!]
	characters: [Summary!]
	creators: [Summary!]
	next: Summary
	previous: Summary
}

type Story implements MarvelNode {
	"""
	The unique ID of the story resource.
	"""
	id: ID
	title: String
	description: String
	"""
	The canonical URL identifier for this resource.
	"""
	resourceURI: String
	type: String
	modified: String
	"""
	The url path of to the image related to the comic.
	"""
	thumbnail: String
	comics: [Summary!]
	events: [Summary!]
	characters: [Summary!]
	creators: [Summary!]
	series: [Summary!]
	originalIssue: Summary
}

type ComicImage {
	path: String
	extension: String
}

type ComicDate {
	type: String
	date: String
}

type ComicPrice {
	type: String
	price: Int
}

type TextObject {
	type: String
	language: String
	text: String
}

type MarvelUrl {
	type: String
	url: String
}
